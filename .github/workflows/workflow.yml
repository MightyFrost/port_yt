name: Ingest YouTube Playlist Data  

on:  
  workflow_dispatch:  # Allow manual trigger  
    inputs:
          port_context:
            description: "The port context input"
            required: false
            default: ""
            
jobs:
  fetch-playlist:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Allow writing to the repository

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Fetch playlist data and save as JSON
      run: |
        # Read the playlist data (assuming it exists in playlist_data.json)
        PLAYLIST_DATA=$(cat playlist_data.json)
    
        # Extract the "items" array from the playlist data
        ITEMS_ARRAY=$(echo "$PLAYLIST_DATA" | jq '.items')

        # Save the extracted array to a file
        if [ -n "$ITEMS_ARRAY" ]; then
          echo "$ITEMS_ARRAY" > playlist_items.json
          echo "Playlist items saved successfully."
        else
          echo "Error: No 'items' array found in playlist_data.json."
          exit 1
        fi
    
        # Debugging: Display the extracted array
        echo "Extracted playlist items:"
        cat playlist_items.json

        # Upload the saved file as an artifact for the next step
        mkdir -p artifacts
        mv playlist_items.json artifacts/
    
    - name: Upload playlist data as artifact
      uses: actions/upload-artifact@v3
      with:
        name: playlist-items
        path: artifacts/playlist_items.json



  ingest-playlist:
    runs-on: ubuntu-latest
    needs: fetch-playlist  # Make sure step 1 completes successfully

    steps:
    - name: Download playlist items artifact
      uses: actions/download-artifact@v3
      with:
        name: playlist-items
        path: .

    - name: Debug and Ingest playlist items into Port
      run: |
        echo "Reading playlist items from file..."
    
        # Ensure the playlist_items.json file is being read correctly
        cat playlist_items.json
    
        # Store the entire array of items from the playlist_items.json
        PLAYLIST_ITEMS=$(cat playlist_items.json)
    
        # Debugging: print the contents of PLAYLIST_ITEMS to confirm it's correct
        echo "Playlist Items (full data):"
        echo "$PLAYLIST_ITEMS"
    
        # Check if the items array exists and contains valid data
        if [[ $(echo "$PLAYLIST_ITEMS" | jq 'type') == '"array"' ]]; then
          echo "Valid JSON array detected."
          
          # Loop through the items array in the correct format
          echo "$PLAYLIST_ITEMS" | jq -c '.[]' | while read ITEM; do
            # Extract fields from the ITEM object
            VIDEO_ID=$(echo "$ITEM" | jq -r '.videoId')
            TITLE=$(echo "$ITEM" | jq -r '.title')
            DESCRIPTION=$(echo "$ITEM" | jq -r '.description')
            THUMBNAIL=$(echo "$ITEM" | jq -r '.thumbnail')
            PUBLISHED_AT=$(echo "$ITEM" | jq -r '.publishedAt')
    
            # Debugging: Show the extracted fields
            echo "Extracted Data:"
            echo "videoId: $VIDEO_ID"
            echo "title: $TITLE"
            echo "description: $DESCRIPTION"
            echo "thumbnail: $THUMBNAIL"
            echo "publishedAt: $PUBLISHED_AT"
    
            # Prepare JSON payload for Port API
            PAYLOAD=$(jq -n \
              --arg identifier "dependency" \
              --arg title "$TITLE" \
              --arg icon "Package" \
              --arg videoId "$VIDEO_ID" \
              --arg description "$DESCRIPTION" \
              --arg thumbnail "$THUMBNAIL" \
              --arg publishedAt "$PUBLISHED_AT" \
              '{
                identifier: $identifier,
                title: $title,
                icon: $icon,
                properties: {
                  videoId: $videoId,
                  title: $title,
                  description: $description,
                  thumbnail: $thumbnail,
                  publishedAt: $publishedAt
                },
                relations: {}
              }')
    
            # Debugging: Show the payload before sending it
            echo "Payload to be ingested:"
            echo "$PAYLOAD"
    
            # Make the API request to Port using curl
            curl -L 'https://api.getport.io/v1/blueprints/dependency/entities' \
              -H 'Content-Type: application/json' \
              -H "Authorization: ${{ secrets.PORT_API_TOKEN }}" \
              -d "$PAYLOAD"
          done
        else
          echo "Error: Invalid JSON array detected."
          exit 1
        fi
