name: Ingest YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      port_context:
        description: "The port context input"
        required: false
        default: ""

jobs:
  fetch-playlist:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Fetch playlist data from YouTube API
      env:
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      run: |
        echo '
        import os
        import requests
        import json

        # YouTube playlist ID from the given URL
        playlist_id = "PL5ErBr2d3QJH0kbwTQ7HSuzvBb4zIWzhy"

        # YouTube API endpoint for fetching playlist items
        api_url = "https://www.googleapis.com/youtube/v3/playlistItems"

        # Parameters for the API request
        params = {
            "part": "snippet",
            "playlistId": playlist_id,
            "maxResults": 500,
            "key": os.getenv("YOUTUBE_API_KEY")
        }

        # Make the GET request
        response = requests.get(api_url, params=params)

        if response.status_code == 200:
            data = response.json()
            items = []
            for item in data.get("items", []):
                snippet = item.get("snippet", {})
                items.append({
                    "videoId": snippet.get("resourceId", {}).get("videoId"),
                    "title": snippet.get("title"),
                    "description": snippet.get("description"),
                    "thumbnail": snippet.get("thumbnails", {}).get("default", {}).get("url"),
                    "publishedAt": snippet.get("publishedAt")
                })

            with open("playlist_items.json", "w") as f:
                json.dump(items, f, indent=2)

            print("Playlist items saved successfully.")
        else:
            print(f"Error fetching playlist: {response.status_code} {response.text}")
            exit(1)

        os.makedirs("artifacts", exist_ok=True)
        os.rename("playlist_items.json", "artifacts/playlist_items.json")
        ' > fetch_playlist.py
        python fetch_playlist.py

    - name: Upload playlist data as artifact
      uses: actions/upload-artifact@v3
      with:
        name: playlist-items
        path: artifacts/playlist_items.json

  ingest-playlist:
    runs-on: ubuntu-latest
    needs: fetch-playlist

    steps:
    - name: Download playlist items artifact
      uses: actions/download-artifact@v3
      with:
        name: playlist-items
        path: .

    - name: Debug and Ingest playlist items into Port
      run: |
        echo "Reading playlist items from file..."

        PLAYLIST_ITEMS=$(cat playlist_items.json)

        echo "Playlist Items (full data):"
        echo "$PLAYLIST_ITEMS"

        if [[ $(echo "$PLAYLIST_ITEMS" | jq 'type') == '"array"' ]]; then
          echo "Valid JSON array detected."

          # Process each JSON object using a while loop
          echo "$PLAYLIST_ITEMS" | jq -c '.[]' | while IFS= read -r ITEM; do
            VIDEO_ID=$(echo "$ITEM" | jq -r '.videoId')
            TITLE=$(echo "$ITEM" | jq -r '.title')
            DESCRIPTION=$(echo "$ITEM" | jq -r '.description')
            THUMBNAIL=$(echo "$ITEM" | jq -r '.thumbnail')
            PUBLISHED_AT=$(echo "$ITEM" | jq -r '.publishedAt')

            PAYLOAD=$(jq -n \
              --arg identifier "$VIDEO_ID" \
              --arg title "$TITLE" \
              --arg icon "Package" \
              --arg videoId "$VIDEO_ID" \
              --arg description "$DESCRIPTION" \
              --arg thumbnail "$THUMBNAIL" \
              --arg publishedAt "$PUBLISHED_AT" \
              '{
                identifier: $identifier,
                title: $title,
                icon: $icon,
                properties: {
                  videoId: $videoId,
                  title: $title,
                  description: $description,
                  thumbnail: $thumbnail,
                  publishedAt: $publishedAt
                },
                relations: {}
              }')

            echo "Payload to be ingested:"
            echo "$PAYLOAD"

            # Send the payload
            curl -L 'https://api.getport.io/v1/blueprints/dependency/entities' \
              -H 'Content-Type: application/json' \
              -H "Authorization: ${{ secrets.PORT_API_TOKEN }}" \
              -d "$PAYLOAD"
          done
        else
          echo "Error: Invalid JSON array detected."
          exit 1
        fi
